System Requirments :
1.1- Generic System Requirements :
1.1.1- GSR_1 
	The password configuration is done in buildroot through 
	1-make menuconfig
	2-System configuration
	3-Root password

1.1.2- GSR_2
	The glibc configuration is done in buildroot through 
	1-make menuconfig
	2-Toolchain 
	3-C library

1.1.3- GSR_3 
	This part is covered in /etc/profile.d/playmusic.sh  in (section 1)

1.1.4- GSR_4
	hard to do right now :D

1.1.5- GSR_5
	All the scripts have been put in an overlay and the configuration is saved via 
	command make savedefconfig

1.1.6- GSR_6
	All scripts will be commented / documented here


1.2- Feature-Specific System Requirements
1.2.1- Feat1 "Auto detection of mass-storage devices that can be connected via USB (e.g. Flash, Memory Card)."
1.2.1.1- FSSR_1 - The MP3 Player shall continuously check for new inserted mass storage devices.
	
This feature is handeled in /root/superMusic/detectUSB script :-
1 -The script countinously searches for devices in /dev/ and the found result would result in one of three cases :
	i-  There is no connected USB devices  as in code in section 1 :-
		a-if there is no USB device connected the script will search for any folders in /media/ and delete them
		b-using the espeak the phrase "No USB devices found" will be said

	ii- A change happened ,This is done through comparing two variables ones that holds the current names of the devices 
	    in /dev/ and another one that holds the names of devices in /dev/ from the previous loop iteration

	ii-1- There is a device that was just connected as in code in section 3 :-
		This case is known through checking if a device that exits in /dev/ doesnt have a folder in /media/

		a- In this case create a folder in /media/ with the name the device had in /dev/ 
		(handled the case if we had the usb device already connected from the begining using the FirstTimeFlag in the script)
		b- mount the deivce on that folder
		c- save data about that device so it can be anounced later by the espeak in seciton 5

	ii-2- There is a device that was just removed in section 4 :-
		This case is known through checking if a device that doesn't exit in /dev/  have a folder in /media/
		a- In this case loop to know which device has the folder in /media/ and doesn't exist in /dev/
		b- remove that folder in /media/
		c- anounce through espeak that a device was removed
  
	iii- Nothing happened : do nothing

1.2.1.2- FSSR_2 - The MP3 Player shall keep track of all .MP3 files available on any storage media.
	This is coverd in Section 2 :-
	A USBFlag exists throught out the code to that indicates if any change happens.

	if a change happens a flag is updated in /root/superMusic/somethingChanged.conf. 

	This flag would lead the script /root/superMusic/musicplayer to update its music array with the ".mp3" files
	in any storage device (searches from "/")

1.2.1.3- FSSR_3 - The MP3 Player shall be able to play any .MP3 file for the connected storage devices.
	Covered in the requirment 1.2.1.2- FSSR_2  

1.2.1.4- FSSR_4 - The MP3 Player shall be able to detect and Read from USB Flash Storage Devices.
	Covered in the requirment 1.2.1.1- FSSR_1

1.2.1.5- FSSR_5 - The MP3 Player shall be able to detect and Read from Memory Card Devices including the image Disk.
	Covered in the requirment 1.2.1.1- FSSR_1

1.2.1.6- FSSR_6 - The MP3 Player shall not modify the content of any connected mass storage device.
	The MP3 player can't modify the content of any storage device

1.2.1.7- FSSR_7 - The MP3 Player shall handle adding and removing of media devices while playing or
            pausing, Playing should not stop unless the media containing the file is removed.

	This requirment led to alot of trouble :-
	a- The scripts running (/root/superMusic/detectUSB and /root/superMusic/musicplayer) would stop in case of removing the device 
	   that has the running song on it .

	This was solved by creating another script /root/superMusic/daemonUP .
	i - /root/superMusic/detectUSB and /root/superMusic/musicplayer constantly writes 1 in files in /root/superMusic/var
	ii- the script /root/superMusic/daemonUP writes 0 in the same files but with a lower perodicitiy than detectUSB and musicplayer
	iii- the script /root/superMusic/daemonUP checks if the files read 0 , then the scripts detectUSB or musicplayer were stoped
	     so it would run them again
	iv - The curser would return back to 0 , stop the song imediatly in Section 1.1 and Section 4.1
	b- In case the removed device didn't have the running song on it , still The curser position wasn't right
	
	i -In case a device was added done in Section 3.1 and Section 3.2 :- 
	   This was solved by checking the number of songs that was on the added device and adding it to the curser as it was observed
	   that after creating the array when a device is connected its content is put first in the array
	
	ii -In case a device was removed done in Section 4.2:-
	    The curser would be decremented by the number of songs that device had 


1.2.3- Feat2 "Ability to play music on different output devices(3.5mm Audio Jack, Bluetooth Audio, HDMI)."
	NOT DONE YET


1.2.2- Feat3 "Manual Control of Music Player (Play/Pause, Next, Previous, Shuffle), either via Push Buttons and
         Keyboard Commands."
Configurations in Buildroot :-
makemenu config -> Target packages -> Audio and video applications
Everything in alsa-utils , atest ,aumix ,bluez-alsa ,hcitop ,rfcomm, mpd ,mpg123 , pulseaudio ,

makemenu config -> Target packages -> Libraries -> Audio/Sound
Everything in alsa-lib , aubio , audiofile , bcg729 ,libid3tag , libmad , Architecture-specific optimizations , libsndfile , portaudio
alsa support , C++ bindings ,sbc , speex , tinyalsa

1.2.2.1- FSSR_8 - The MP3 Player shall control playing the .MP3 files by pressing the "Play/Pause" push button.  
	Covered in /root/superMusic/musicplayer Section1 :-
	i-If the button is pressed for the first time (Section 1.1) a song (depending on the Curser) is played and flags 
	(playflag,FTFlag,button_state) are risen.
	ii-if the button is pressed again we would go to Section 1.2 or Section 1.3 depending on the button_state
	   where Section1.3 pauses the song and Section1.2 continues the song , both change the button_state before finishing

1.2.2.3- FSSR_9 - The MP3 Player shall jump to the next song when pressing the "Next" push button.
	 Covered in /root/superMusic/musicplayer Section2 :- 
	 i-Checks if the playflag is risen which means there is a song playing right now , if it was , it increments the curser 
	   in case the curser's value was less than the total number of songs value 
	 ii-It stops the current song then play the song after incrementing the curser

1.2.2.4- FSSR_10 - The MP3 Player shall restart the current song on pressing the "Previous" push button once.
	Covered in /root/superMusic/musicplayer Section3.1 :- 
	In case a song is playing  ,It stops the current playing song and play it again , but activates a flag (PrevPressed)

1.2.2.4- FSSR_11 - The MP3 Player shall play the previous song when pressing the "Previous" push button two
            	   successive times within 1 Second.
	Covered in /root/superMusic/musicplayer Section3.2 :-
	After releasing the button the first time the previous button is pressed , the script goes into a loop that lasts one second,
	checking if the button is pressed again.
	if it was it stops the current playing song , and decrement the curser and play the previous song in case the curser's value was 
	more than 0

1.2.2.5- FSSR_12 - The MP3 Player shall jump to a random song when pressing the "Shuffle" push button.
	Covered in /root/superMusic/musicplayer Section4 :-
	In case a song is playing , it stops that song and put a random number in the curser (from 0 to total number of songs-1)
	then play the song the curser is pointing at.

1.2.2.6- FSSR_13 - The MP3 Player shall start playing the .MP3 files when entering "play" on the commandline.
	 Covered in /root/superMusic/musicplayer Section5 :-
	 i - A script was created in /bin/ with the name play , that activates a flag in /root/superMusic/var/PlayingFlag
	 ii- in Section5 in /root/superMusic/musicplayer it checks if that PlayingFlag has been activated and if so , it deactivates the flag  		     then behavies exactly as the play in FSSR_8 requirment

1.2.2.7- FSSR_14 - The MP3 Player shall pause the played .MP3 file when entering "pause" on the commandline.
	 Covered in /root/superMusic/musicplayer Section6 :-
	 i - A script was created in /bin/ with the name pause , that activates a flag in /root/superMusic/var/PauseFlag
	 ii- in Section6 in /root/superMusic/musicplayer it checks if that PauseFlag has been activated and if so , it deactivates the flag  		     then behavies exactly as the pause in FSSR_8 requirment

1.2.2.8- FSSR_15 - The MP3 Player shall skip to the next song when entering "next" on the commandline.
	 Covered in /root/superMusic/musicplayer Section7 :-
	 i - A script was created in /bin/ with the name next , that activates a flag in /root/superMusic/var/NextFlag
	 ii- in Section7 in /root/superMusic/musicplayer it checks if that NextFlag has been activated and if so , it deactivates the flag  		     then behavies exactly as the next in FSSR_9 requirment

1.2.2.9- FSSR_16 - The MP3 Player shall play the previous song when entering "previous" on the commandline.
	 Covered in /root/superMusic/musicplayer Section8 :-
	 i - A script was created in /bin/ with the name prev , that activates a flag in /root/superMusic/var/PrevFlag
	 ii- in Section8 in /root/superMusic/musicplayer , it checks if that PrevFlag has been activated and if so ,
	     the current song will be stoped the curser will be decremented by one then the song the curser is point 
	     at will be played in case the curser's value was more than 0

1.2.2.10- FSSR_17 - The MP3 Player shall jump to a random song when entering "shuffle" on the commandline.
	 Covered in /root/superMusic/musicplayer Section9 :-
	 i - A script was created in /bin/ with the name shuffle , that activates a flag in /root/superMusic/var/ShufFlag
	 ii- in Section9 in /root/superMusic/musicplayer it checks if that ShufFlag has been activated and if so , it deactivates the flag  	 	     then behavies exactly as the shuffle in FSSR_12 requirment



1.2.4- Feat4 "Streaming of the played music on the terminal (SSH terminal over Ethernet/Wifi, Serial terminal)."
Configurations in Buildroot :-
make menuconfig->Target packages -> Networking applications : openssh

1.2.4.1- FSSR_27 - The Output Image shall have static network IP "192.168.1.6" and netmask "255.255.255.0".
	Covered in /etc/network/interfaces 

1.2.4.2-FSSR_28 - The MP3 Player shall have the ssh enabled on startup and accessible via "root" user.
	Covered in buildroot configurations

1.2.4.3- FSSR_29 - The MP3 Player Shall Greet the user on any new connected serial/ssh terminal with this 
           	   greeting text "Welcome to BuildRoot MP3 Player" once.
	Covered in /etc/profile.d/playmusic.sh Section 2

1.2.4.4- FSSR_30 - The MP3 Player shall output on the serial/ssh terminal 
                   "MP3 Playing > [File_Name.mp3] Via [audio device name]" when starting playing .MP3 file.
	Covered in /etc/profile.d/playmusic.sh Section 3 :-
	As the song array is put in /root/superMusic/var/songArray file , and the curser is put in /root/superMusic/var/Curser file,
	and the state (running , paused) is put in /root/superMusic/var/State file,
	we can get the current state and the name of the song played.

1.2.4.5- FSSR_31 - The MP3 Player shall output on the serial/ssh terminal "MP3 Paused > [File_Name.mp3]" when 
            	   pausing the .MP3 file.
	Covered in /etc/profile.d/playmusic.sh Section 3 :-
	As the state (running , paused) is put in /root/superMusic/var/State file,
	we can get the current state of the song and check it is paused then output on the terminal

1.2.4.6- FSSR_32 - The MP3 Player shall output on the serial/ssh terminal "No .MP3 files found" when it can't find 
            	   any .mp3 file on the system.
	Covered in /etc/profile.d/playmusic.sh Section 3.1 :-
	A check is done for all the .mp3 files , and if their count is zero "No .MP3 files found" will be printed

1.2.4.7- FSSR_33 - The MP3 Player shall refresh the data outputted on the serial/ssh terminal every 1 second.
	Covered in /etc/profile.d/playmusic.sh Section 3.2


1.2.5- Feat5 "Audio and Text Notifications about System changes (e.g. Inserting/removing storage/audio devices)."

Configurations in Buildroot :-
make menuconfig->Target packages -> Audio and video applications : espeak -> alsa via portaudio

1.2.5.1- FSSR_34 - The MP3 Player shall speak out (Text-to-Speech) a notification when an audio device is connected 
            or disconnected.
	 NOT DONE YET

1.2.5.4- FSSR_35 - The MP3 Player shall speak out (Text-to-Speech) a notification when a storage device is added 
            or removed.
	 Covered in /root/superMusic/detectUSB Section 5 and Section 4.2  :-
	 The script will detect if the USB is added or removed and will announce information about the added device (Number of songs ,  
	 type and size) and will announce when a device is removed

1.2.5.3- FSSR_36 - The MP3 Player shall output the audio notification on the highest priority audio device available.
	 NOT DONE YET
